import { getSingleRecipeById } from "@/utils/edamam-api/api-client";
import { RecipeDetails } from "@/types/recipes";
import { GetServerSideProps, GetServerSidePropsContext } from "next";
import { encode } from "querystring";
import Link from "next/link";
import IngredientList from "@/components/IngredientList";
import styles from "@/styles/RecipePage.module.css";
import RecipeProfile from "@/components/RecipeProfile";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import Header from "@/components/Header";
import { UserDTO } from "@/types/user";
import { getCollection } from "@/utils/mongo-db/db-client";
import { ObjectId } from "mongodb";
import { buildUserDTOFromDocument } from "@/utils/transformer/documentToDTO";
import FavoritesButton from "@/components/FavoritesButton";
import Background from "@/components/Background";
import process from "process";

export default function RecipePage({
  recipe,
  user,
}: {
  recipe: RecipeDetails;
  user: UserDTO | null;
}) {
  const images = recipe.images;

  const image = images.LARGE?.url ?? recipe.image;
  const imageLoader = () => image;
  const router = useRouter();

  const handleAddToFavorites = async () => {
    if (user && user.recipes) {
      console.log("adding recipe");
      const userToSave: UserDTO = {
        ...user,
        recipes: [...user.recipes, recipe],
      };
      await updateUser(userToSave);
    }
  };

  const handleRemoveFromFavorites = async () => {
    if (user && user.recipes) {
      console.log("removing recipe");
      const userToSave: UserDTO = {
        ...user,
        recipes: user.recipes.filter(
          (userRecipe) => userRecipe.uri !== recipe.uri,
        ),
      };
      await updateUser(userToSave);
    }
  };

  const updateUser = async (userToSave: UserDTO) => {
    const headers = new Headers();
    headers.append("property", "recipes");
    const responsePromise = await fetch(`/api/users/${userToSave._id}`, {
      method: "PUT",
      body: JSON.stringify(userToSave),
      headers: headers,
    });

    const response = await responsePromise.json();
    if (response.status === 202) {
      console.log("updating recipes");
    }
  };

  const isFavorite = () => {
    return (
      user?.recipes.some((userRecipe) => userRecipe.uri === recipe.uri) ?? false
    );
  };

  return (
    <>
      <Head>
        <title>{recipe.label} Recipe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className={styles.recipeDiv}>
        <RecipeProfile title={recipe.label} image={recipe.image} />
        <div className={styles.recipeData}>
          <Image
            className={styles.img}
            loader={imageLoader}
            placeholder={"blur"}
            width={300}
            height={300}
            blurDataURL={"/Rolling-1s-460px.gif"}
            alt={recipe.label}
            src={image}
          />
          <IngredientList ingredients={recipe.ingredients} />
        </div>
        <div className={styles.links}>
          <Link
            className={styles.link}
            href={"https://www.justtherecipe.com/?url=" + recipe.url}
            target="_blank"
          >
            Get Preparation Steps
          </Link>
          <FavoritesButton
            handleAddToFavorites={handleAddToFavorites}
            handleRemoveFromFavorites={handleRemoveFromFavorites}
            favorite={isFavorite()}
            isLoggedIn={Boolean(user)}
          />
          <button className={styles.link} onClick={() => router.back()}>
            Back to Recipes
          </button>
        </div>
      </div>
      <Background />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({
  query,
  req,
}: GetServerSidePropsContext) => {
  const params = encode(query);
  const wrappedRecipe = getSingleRecipeById(params.slice(3));
  const recipe = (await wrappedRecipe).recipe as RecipeDetails;

  const { user: userId } = req.cookies;
  if (!userId) {
    return {
      props: {
        recipe,
        user: null,
      },
    };
  }
  const collection = await getCollection(
    String(process.env.USERS_COLLECTION_NAME),
  );
  const user = await collection.findOne({ _id: new ObjectId(userId) });
  if (!user) {
    return {
      props: {
        recipe,
        user: null,
      },
    };
  }
  return {
    props: {
      recipe,
      user: buildUserDTOFromDocument(user),
    },
  };
};
